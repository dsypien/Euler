using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Euler
{
    /// <summary>
    /// Highly divisible triangular number
    /// </summary>
    /// 
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// 
    /// Let us list the factors of the first seven triangle numbers:
    /// 1: 1
    /// 3: 1,3
    /// 6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// 
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    
    static public class Problem12
    {
        static public int Run()
        {
            double tri = 1;

            for (int i = 2; i < int.MaxValue; i++)
            {
                tri += i;

                // initialize to 1 for i itself
                int numDivisors = 1;  
                int sqrt = (int)Math.Ceiling(Math.Sqrt(tri));

                // find divisors
                for (int j = 1; j <= sqrt; j++)
                {
                    if (tri % j == 0)
                        numDivisors += 2;
                }

                if (numDivisors >= 500)
                {
                    return (int)tri;
                }
            }

            return (int)tri;
        }
    }
}
